{"version":3,"sources":["dateutils.js","App.js","serviceWorker.js","index.js"],"names":["range","start","end","Array","fill","map","_","i","days","allMonths","styles","sunday","color","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","arr","_useState","useState","_useState2","Object","slicedToArray","currentYear","setYear","monthRows","year","months","m","Date","firstOfMonth","text","cell","getISODay","index","daysInMonth","getDaysInMonth","result","cells","length","row","findIndex","_ref","splice","push","getMonths","currentIndex","getMonth","_useState3","_useState4","currentMonthIndex","setMonth","currentMonth","reduce","flat","concat","find","dateRows","i2","date","console","log","rowSpan","colSpan","className","onClick","month","key","join","filter","monthRow","dateRow","toConsumableArray","slice","day","style","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e3059de.chunk.js","sourcesContent":["import { getISODay, getDaysInMonth } from 'date-fns';\n\nconst range = (start, end) => Array(end - start + 1).fill().map((_, i) => start + i);\n\nconst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\nexport const getDays = start => [...days.slice(start, 7), ...days.slice(0, start)];\n\nexport const getDateRows = () => range(1, 7)\n  .map(\n    i => range(0, 4)\n      .map(i2 => i + i2 * 7)\n      .map(date => date <= 31 ? date : '')\n  );\n\nexport const allMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nexport const getMonths = year => {\n  const months = range(0, 11)\n    .map(m => new Date(year, m, 1))\n    .map((firstOfMonth, i) => ({ text: allMonths[i], cell: getISODay(firstOfMonth) - 1, index: i, daysInMonth: getDaysInMonth(firstOfMonth) }));\n  const result = [];\n  const cells = range(0, 6);\n  while (months.length) {\n    const row = cells\n      .map(i => {\n        const index = months.findIndex(({ cell }) => cell === i);\n        return index < 0 ? { text: '', cell: -1, index: -1 } : months.splice(index, 1)[0];\n      })\n    result.push(row);\n  }\n  return result;\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { getMonths, getDays, getDateRows } from './dateutils';\nimport { getMonth } from 'date-fns';\n\nconst styles = {\n  sunday: {\n    color: 'red'\n  }\n}\n\nconst flatten = arr => arr.reduce((flat, a) => flat.concat(a), []);\n\nexport default () => {\n  const [currentYear, setYear] = useState(2019);\n  const monthRows = getMonths(currentYear);\n  const currentIndex = getMonth(new Date());\n  const [currentMonthIndex, setMonth] = useState(currentIndex); // This needs to be an index to handle switching years\n  const currentMonth = flatten(monthRows).find(({ index }) => index === currentMonthIndex);\n  const dateRows = getDateRows();\n  console.log(currentYear, currentMonth, monthRows, dateRows);\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td rowSpan='3' colSpan='5' className='buttons'>\n            <h1>{currentYear}</h1>\n            <button onClick={() => setYear(currentYear - 1)}>Prev</button>\n            <button onClick={() => setYear(currentYear + 1)}>Next</button>\n          </td>\n          {\n            monthRows[0].map((month, i) =>\n              <td key={i}\n                className={[month.text !== '' ? 'hover' : '', month.index === currentMonth.index ? 'selected' : ''].join(' ')}\n                onClick={() => setMonth(month.index)}>\n                {month.text}\n              </td>\n            )\n          }\n        </tr>\n        {\n          monthRows\n            .filter((_, i) => i !== 0)\n            .map((monthRow, i) => (\n              <tr key={i}>\n                {\n                  monthRow.map((month, i) =>\n                    <td key={i}\n                      className={[month.text !== '' ? 'hover' : '', month.index === currentMonth.index ? 'selected' : ''].join(' ')}\n                      onClick={() => setMonth(month.index)}>\n                      {month.text}\n                    </td>\n                  )\n                }\n              </tr>\n            ))\n        }\n        {\n          dateRows.map((dateRow, i) =>\n            <tr className='date' key={i}>\n              {\n                dateRow.map((text, i) =>\n                  <td key={i} className={[text !== '' ? 'hover' : '', text > currentMonth.daysInMonth ? 'disabled' : ''].join(' ')}>{text}</td>\n                )\n              }\n              {\n                getDays(i).map((day, i) =>\n                  <td key={i} style={day === 'Sun' ? styles.sunday : null}>{day}</td>\n                )\n              }\n            </tr>\n          )\n        }\n      </tbody>\n    </table>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}